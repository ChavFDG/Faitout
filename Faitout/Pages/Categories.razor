@page "/catégories"

@inject Faitout.Services.UploadService UploadService
@inject Faitout.Services.CategoryService CategoryService
@inject Faitout.Services.VATService VATService

<h1>Catégories</h1>

<p>Si dessous la liste de toute les catégories de produits que vous gérez.</p>

@if (categories == null)
{
    <p><em>Chargement...</em></p>
}
else
{
    <RadzenButton Click="@(e => { OpenAddTopCategory(); })" Text="Ajouter une catégorie"></RadzenButton>
    <RadzenButton Disabled="!canAddSubCategory" Click="@(e => { OpenAddSubCategory(selectedCategory); })" Text="Ajouter une sous catégorie"></RadzenButton>
    <RadzenButton Disabled="!canModify" Click="@(e => { OpenModifyCategory(selectedCategory); })" Text="Modifier"></RadzenButton>
    <RadzenButton Disabled="!canDelete" Click="@(e => { ConfirmDelete(selectedCategory); })" Text="Supprimer"></RadzenButton>
    <RadzenButton Disabled="!canMoveDown" Click="MoveDown" Icon="keyboard_arrow_down"></RadzenButton>
    <RadzenButton Disabled="!canMoveUp" Click="MoveUp" Icon="keyboard_arrow_up"></RadzenButton>


    <MatDialog @bind-IsOpen="@dialogIsOpen">
        <MatDialogTitle>Catégorie</MatDialogTitle>
        <EditForm Model="@selectedCategory" OnValidSubmit="@Save">
            <MatDialogContent>
                <DataAnnotationsValidator />
                <MatTextField Label="Nom" @bind-Value="@selectedCategory.Name"></MatTextField>
                <ValidationMessage For="@(()=> selectedCategory.Name)" />
                <MatTextField Label="Description" @bind-Value="@selectedCategory.Description"></MatTextField>
                <div class="row">
                    <span>Visible par le client</span>
                    <MatSlideToggle @bind-Value="@selectedCategory.ClientVisible"></MatSlideToggle>
                </div>
                <div class="row">
                    <span>Visible sur la caisse</span>
                    <MatSlideToggle @bind-Value="@selectedCategory.CashRegisterVisible"></MatSlideToggle>
                </div>
               
                <MatSelect HelperText="TVA sur place" Label="TVA sur place" @bind-Value="@selectedCategory.EatInVatIdString">
                    @foreach (var vat in vats)
                        {
                        <MatOptionString Value="@vat.Id.ToString()">@vat.ToString()</MatOptionString>
                        }
                    /**/
                </MatSelect>
                <MatSelect HelperText="TVA à emporter" Label="TVA à emporter" @bind-Value="@selectedCategory.TakeAwayVatIdString">
                    @foreach (var vat in vats)
                        {
                        <MatOptionString Value="@vat.Id.ToString()">@vat.ToString()</MatOptionString>
                        }
                    /**/
                </MatSelect>
            </MatDialogContent>
            <MatDialogActions>
                <MatButton Type="button" OnClick="@(e => { dialogIsOpen = false; })">Annuler</MatButton>
                <MatButton Type="submit">Sauvegarder</MatButton>
            </MatDialogActions>
        </EditForm>
    </MatDialog>

    <MatDivider />

    <div class="row">
        <div class="col-md-12">
            <RadzenTree Style="width: 100%;" Change="@CatagorySelectedChange">
                @foreach (var category in categories.Where(x => x.Level == 0))
                {
                    <ChildCategoryTree category="category" />
                }
            </RadzenTree>
        </div>
    </div>
    <MatDivider />
}


@code {

    public class CategoryTest
    {
        public Guid Id { get; set; }

        public string Name { get; set; }

        public string Description { get; set; }

        public List<Product> Products { get; set; }


        public Guid EatInVatId { get; set; }

        public virtual VAT EatInVat { get; set; }

        public Guid TakeAwayVatId { get; set; }

        public virtual VAT TakeAwayVat { get; set; }

        public int Level { get; set; } = 0;

        public int Order { get; set; } = 0;

        public Guid? ParentCategoryId { get; set; }

        public virtual Category ParentCategory { get; set; }

        public virtual List<Category> ChildCategories { get; set; }

    }

    private Category parent;
    private int level;
    private int order;

    private bool canDelete = false;
    private bool canAddSubCategory = false;
    private bool canModify = false;
    private bool canMoveDown = true;
    private bool canMoveUp = true;

    private List<VAT> vats;

    private List<Category> categories = new List<Category>();

    protected override void OnInitialized()
    {


        vats = VATService.GetVAT();

        LoadCategories();

        dialogService.OnClose += ConfirmDeleteDialogClose;
    }

    void LoadCategories()
    {
        categories = CategoryService.GetCategoryOrderInTree();
        StateHasChanged();
    }

    void SetMoves()
    {

    }

    void CatagorySelectedChange(TreeEventArgs args)
    {
        if (args.Value == null)
        {
            canDelete = false;
            canAddSubCategory = false;
            canModify = false;
        }
        else
        {
            treeSelectedCategory = selectedCategory = (args.Value as Category);
            canAddSubCategory = Guid.Empty != selectedCategory.Id;
            canModify = Guid.Empty != selectedCategory.Id;
            canDelete = !selectedCategory.Childs.Any();
        }
    }

    void MoveUp()
    {
        CategoryService.ReduceOrder(selectedCategory);
        LoadCategories();

    }

    void MoveDown()
    {
        CategoryService.IncreaseOrder(selectedCategory);
        LoadCategories();
    }


    void OpenModifyCategory(Category category)
    {
        selectedCategory = category;
        level = selectedCategory.Level;
        order = selectedCategory.Order;
        parent = selectedCategory.Parent;
        dialogIsOpen = true;
    }

    void InitNewCategory()
    {
        selectedCategory = new Category();
        selectedCategory.TakeAwayVatId = selectedCategory.EatInVatId = vats.First(x => x.Tax == 0).Id;
    }

    void OpenAddTopCategory()
    {
        InitNewCategory();
        parent = null;
        level = 0;
        order = categories.Where(x => x.Level == 0).ToList().Count;
        dialogIsOpen = true;
    }

    void OpenAddSubCategory(Category parentCategory)
    {
        InitNewCategory();
        parent = parentCategory;
        level = parentCategory.Level + 1;
        order = parentCategory.Childs.ToList().Count;
        dialogIsOpen = true;
    }

    Category selectedCategory = new Category();
    Category treeSelectedCategory = new Category();
    bool dialogIsOpen = false;

    void Save()
    {
        selectedCategory.Level = level;
        selectedCategory.Order = order;
        selectedCategory.ParentId = parent?.Id;
        Toaster.NotifyResult(CategoryService.Save(selectedCategory), selectedCategory.ToString());
        selectedCategory = treeSelectedCategory;
        LoadCategories();
        dialogIsOpen = false;
    }

    void ConfirmDelete(Category category)
    {
        dialogService.OpenConfirmDialog("Suppression", "Confirmer la suppression de la catégorie " + category.ToString(), category);
    }

    void ConfirmDeleteDialogClose(dynamic dialogResult)
    {
        Category category = dialogResult as Category;
        if (category != null)
        {
            Toaster.NotifyResult(CategoryService.Delete(category), category.ToString());
            canDelete = false;
            canAddSubCategory = false;
            canModify = false;
            selectedCategory = new Category();

            LoadCategories();
        }
    }
}
