@page "/tags"

@inject Faitout.Services.UploadService UploadService
@inject Faitout.Services.TagService TagService

<h1>Tags</h1>

<p>Si dessous la liste de tout les tags que vous gérez.</p>

@if (tags == null)
{
    <p><em>Chargement...</em></p>
}
else
{
    <RadzenButton Click="@(e => { selectedTag = new Tag();  dialogIsOpen = true; })" Text="Ajouter"></RadzenButton>

    <MatDialog @bind-IsOpen="@dialogIsOpen">
        <MatDialogTitle>Tag</MatDialogTitle>
        <EditForm Model="@selectedTag" OnValidSubmit="@Save">
            <MatDialogContent>
                <DataAnnotationsValidator />
                <MatTextField Label="Nom" @bind-Value="@selectedTag.Name"></MatTextField>
                <ValidationMessage For="@(()=> selectedTag.Name)" />
                <MatTextField Label="Description" @bind-Value="@selectedTag.Description"></MatTextField>
                <ValidationMessage For="@(()=> selectedTag.Description)" />
                <p>Couleur :</p>
                <ColorPicker @bind-Color="@selectedTag.Color" />
                <div>
                    <p>
                        Aperçue :
                        <FtTag Tag="selectedTag" />
                    </p>
                </div>
            </MatDialogContent>
            <MatDialogActions>
                <MatButton Type="button" OnClick="@(e => { dialogIsOpen = false; })">Annuler</MatButton>
                <MatButton Type="submit">Sauvegarder</MatButton>
            </MatDialogActions>
        </EditForm>
    </MatDialog>

    <table class="table">
        <thead>
            <tr>
                <th>Nom</th>
                <th>Description</th>
                <th>Aperçue</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var tag in tags.OrderBy(x => x.Name))
            {
            <tr>
                <td>@tag.Name</td>
                <td>@tag.Description</td>
                <td>
                    <FtTag Tag="tag"/>
                </td>
                <td><MatButton OnClick="@(e => { selectedTag = tag;  dialogIsOpen = true; })">Modifier</MatButton> | <MatButton OnClick="@(e => { ConfirmDelete(tag); })">Supprimer</MatButton></td>
            </tr>
            }
        </tbody>
    </table>
}


@code {

    private List<Tag> tags;
    Tag selectedTag = new Tag();

    bool dialogIsOpen = false;

    protected override void OnInitialized()
    {
        LoadTags();

        dialogService.OnClose += Close;
    }

    void LoadTags()
    {
        tags = TagService.GetTags();
        StateHasChanged();
    }


    void Save()
    {
        Toaster.NotifyResult(TagService.Save(selectedTag), selectedTag.ToString());
        LoadTags();
        dialogIsOpen = false;
    }

    void ConfirmDelete(Tag tag)
    {
        dialogService.OpenConfirmDialog("Suppression", "Confirmer la suppression du tag " + tag.ToString(), tag);
    }

    void Close(dynamic dialogResult)
    {
        Tag tag = dialogResult as Tag;
        if (tag != null)
        {
            Toaster.NotifyResult(TagService.Delete(tag), tag.ToString());
            LoadTags();
        }
    }
}
