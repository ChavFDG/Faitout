@page "/tva"
@inject Faitout.Services.VATService VATService

<h1>TVA</h1>

<p>Si dessous la liste de toute les TVA que vous gérez.</p>

@if (vats == null)
{
    <p><em>Chargement...</em></p>
}
else
{
    <RadzenButton Click="@(e => { selectedVat = new VAT();tempSelectedTax = 0;  dialogIsOpen = true; })" Text="Ajouter"></RadzenButton>

    <MatDialog @bind-IsOpen="@dialogIsOpen">
        <MatDialogTitle>Taxe</MatDialogTitle>
        <EditForm Model="@selectedVat" OnValidSubmit="@Save">
            <MatDialogContent>
                <DataAnnotationsValidator />
                <MatNumericUpDownField Label="Valeur de la TVA" Step="0.01m" DecimalPlaces=2 Minimum="0" Maximum="100" FieldType="MatNumericUpDownFieldType.Percent" 
                                       @bind-Value="tempSelectedTax"/>
            </MatDialogContent>
            <MatDialogActions>
                <MatButton Type="button" OnClick="@(e => { dialogIsOpen = false; })">Annuler</MatButton>
                <MatButton Type="submit">Sauvegarder</MatButton>
            </MatDialogActions>
        </EditForm>
    </MatDialog>


    <table class="table">
        <thead>
            <tr>
                <th>Taux</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var vat in vats.OrderBy(x => x.Tax))
            {
                <tr>
                    <td>@vat.ToString()</td>
                    <td>
                        @if (vat.Tax != 0)
                        {
                            <MatButton OnClick="@(e => { selectedVat = vat; tempSelectedTax = vat.Tax;  dialogIsOpen = true; })">Modifier</MatButton>
                            <MatButton Disabled="@(vat.TakeAwayCategories.Any()||vat.EatInCategories.Any())" OnClick="@(e => { ConfirmDelete(vat); })">Supprimer</MatButton>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {


    private decimal tempSelectedTax = 0;
    private List<VAT> vats;

    protected override void OnInitialized()
    {
        LoadVat();

        dialogService.OnClose += Close;
    }

    void LoadVat()
    {
        vats = VATService.GetVAT();
        StateHasChanged();
    }

    VAT selectedVat = new VAT();
    bool dialogIsOpen = false;

    void Save()
    {
        if (vats.Any(x => x.Tax == tempSelectedTax))
            Toaster.NotifyFail("Modification annulé", "La tax " + selectedVat.ToString() + " existe déjà");
        else
        {
            selectedVat.Tax = tempSelectedTax;
            Toaster.NotifyResult(VATService.Save(selectedVat), selectedVat.ToString());
        }
        LoadVat();
        dialogIsOpen = false;
    }

    void ConfirmDelete(VAT vat)
    {
        dialogService.OpenConfirmDialog("Suppression", "Confirmer la suppression de la taxe " + vat.ToString(), vat);
    }

    void Close(dynamic dialogResult)
    {
        VAT vat = dialogResult as VAT;
        if (vat != null)
        {
            Toaster.NotifyResult(VATService.Delete(vat), vat.ToString());
            LoadVat();
            StateHasChanged();
        }
    }
}