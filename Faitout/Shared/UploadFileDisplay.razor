@inject Faitout.Services.UploadService UploadService
@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment WebHostEnvironment

<p>@Label</p>
<MatFileUpload Label="Déposer ou choisir" OnChange="@FilesReadyForUpload"></MatFileUpload>
@foreach (var file in _files.Where(x=>x.Show))
{
    <p>
        @if (file.IsImage())
        {
            <RadzenImage Path="@file.InternalFileName.GetFilePath()" Style="width:50px" />
        }
        @file.UserFileName <MatButton Icon="close" Type="button" @onclick="@(e=> { file.Show = false; FilesNames.Remove(file.InternalFileName); FilesNamesChanged.InvokeAsync(FilesNames); })" />
    </p>
}



@code {
    [Parameter]
    public string Label { get; set; } = "Choisir un fichier";

    [Parameter]
    public bool ImageOnly { get; set; } = false;

    [Parameter]
    public bool MultipleFile { get; set; } = false;

    private List<UploadedFileInfo> _files { get; set; } = new List<UploadedFileInfo>();

    private List<string>  _filesNames;

    [Parameter]
    public List<string> FilesNames
    {
        get => _filesNames;
        set
        {
            if (_filesNames == value) return;
            _filesNames = value;

            foreach (var name in value)
            {
                if (!_files.Any(x => x.InternalFileName == name))
                    _files.Add(new UploadedFileInfo(name));
            }

            FilesNamesChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<List<string>> FilesNamesChanged { get; set; }


    public List<string> GetFilesName()
    {
        return _files.ToStringList();
    }

    public List<string> SaveAndReset()
    {
        List<string> toReturn = _files.ToStringList();
        //Keep the show and remove the rest
        _files.Where(x => !x.Show).ToList().ForEach(x => UploadService.Remove(x.InternalFileName));
        return toReturn;
    }

    public void Reset()
    {
        //Keep the original file remove the rest
        _files.Where(x => !x.OriginalFile).ToList().ForEach(x => UploadService.Remove(x.InternalFileName));
        _files.Clear();
        FilesNames.Clear();
    }

    async Task FilesReadyForUpload(IMatFileUploadEntry[] files)
    {
        if (files == null)
            return;
        if (!MultipleFile)
            if (files.Length < 1)
            {
                Toaster.Add("Veuillez selectionner qu'un seul fichier ", MatToastType.Warning, "Fichiers multiples");
                return;
            }
            else if (_files.Where(x => x.Show).ToList().Count == 1)
            {
                _files.Where(x => x.Show).First().Show = false;
            }

        try
        {
            foreach (var file in files)
            {
                if (file.Size > 1024 * 1024)
                {
                    Toaster.Add(file.Name + " dépasse la taille authorisé", MatToastType.Warning, "Taille invalide");
                    continue;
                }
                if (!file.Type.StartsWith("image") && ImageOnly)
                {
                    Toaster.Add(file.Name + " n'est pas une image valide", MatToastType.Warning, "Image invalide");
                    continue;
                }

                this._files.Add(await UploadService.WriteFile(file));
            }
        }
        catch (Exception e)
        {
            Toaster.Add(e.Message, MatToastType.Danger, "Erreur lors du téléversement");
        }
        finally
        {
            await InvokeAsync(async () => { this.StateHasChanged(); });
        }
    }
}
